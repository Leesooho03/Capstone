package com.hy.capstone.project;

import org.springframework.core.io.FileSystemResource;
import org.springframework.core.io.Resource;
import org.springframework.core.io.UrlResource;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestParam;

import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.List;
import java.util.Map;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.lang3.builder.ToStringBuilder;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.ui.Model;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.util.UriComponentsBuilder;
import org.springframework.web.util.UriUtils;

import com.hy.capstone.PagingVO;

import egovframework.com.cmm.EgovWebUtil;
import egovframework.com.utl.fcc.service.EgovFileUploadUtil;
import egovframework.com.utl.fcc.service.EgovFormBasedFileVo;

@Controller
public class ProjectController {
    @Autowired
    private ProjectService projectService;

    @RequestMapping(value = "/projectList.do")
    public String projectList(ModelMap model, HttpServletRequest request) throws Exception {
        String pgParam = request.getParameter("pg");
        int pg = pgParam != null ? Integer.parseInt(pgParam) : 1; // 페이지 번호, 기본값은 1
        int recordCountPerPage = 10; // 페이지당 레코드 수
        
        // 검색 조건 받아오기
        String searchFlag = request.getParameter("search_flg");
        String searchKeyword = request.getParameter("search");

        // 전체 레코드 수 가져오기
        int totalRecordCount = projectService.getTotalProjectCount(searchFlag, searchKeyword);
        // 전체 페이지 수 계산
        int totalPageCount = (int) Math.ceil((double) totalRecordCount / recordCountPerPage);

        // 현재 페이지에서 보여줄 레코드의 시작 인덱스
        int startIdx = (pg - 1) * recordCountPerPage;

        // 프로젝트 리스트 가져오기
        List<ProjectVO> projectList = projectService.getProjectList(startIdx, recordCountPerPage, searchFlag, searchKeyword);

        model.addAttribute("projectList", projectList);
        model.addAttribute("pg", pg);
        model.addAttribute("totalRecordCount", totalRecordCount);
        model.addAttribute("totalPageCount", totalPageCount);
        model.addAttribute("startIdx", startIdx);

        return "/projectList";
    }
    @RequestMapping(value = "/insertProject.do", method = RequestMethod.POST)
    public String insertProject(@RequestParam Map<String, String> map, HttpServletRequest request)
    throws Exception{
    	request.setCharacterEncoding("UTF-8");
    	String root = request.getSession().getServletContext().getRealPath("/");
		String strUploadPath = root +"/upload/file/";
		int size =10*1024*1024;
		List<EgovFormBasedFileVo> list =  EgovFileUploadUtil.uploadFiles(request, strUploadPath, size);
		ProjectVO pvo = new ProjectVO();
		pvo.setCompany_manage(request.getParameter("company_name"));
		pvo.setCompany_name(request.getParameter("company_name"));
		pvo.setCompany_phone(request.getParameter("company_phone"));
		pvo.setEnd_date(request.getParameter("end_date"));
		pvo.setManage_group(request.getParameter("manage_group"));
		pvo.setManage_phone(request.getParameter("manage_phone"));
		pvo.setProject_contents(request.getParameter("project_contents"));
		pvo.setProject_cost(request.getParameter("project_cost"));
		pvo.setProject_manage(request.getParameter("project_manage"));
		pvo.setProject_name(request.getParameter("project_name"));
		pvo.setStart_date(request.getParameter("start_date"));
		for (EgovFormBasedFileVo vo : list) {
			pvo.setFile_name(vo.getFileName());
//			pvo.setFile_path(strUploadPath + vo.getServerSubPath()+"/"+vo.getPhysicalName());
			pvo.setFile_path("/upload/file/"+vo.getServerSubPath()+"/"+vo.getPhysicalName());
//			pvo.setFile_path(strUploadPath+"/"+vo.getPhysicalName());
		}
        projectService.insertProject(pvo);
      return "redirect:/projectList.do";
    }
    @RequestMapping(value="/projectDtl.do")
    public String projectDtl(@RequestParam("project_id") String projectId, Model model) {
    	try {
    		ProjectVO projectDtl = projectService.getProjectDtl(projectId); 
    		model.addAttribute("projectDtl", projectDtl);
    	}
    	catch (Exception e) {
    		e.printStackTrace();
    		return "/";
    	}
    	return "project_dtl";
    }
    
    @Autowired
    private ServletContext servletContext;
    @RequestMapping(value="/downloadFile")
    public ResponseEntity<Resource> downloadFile(@RequestParam("filePath") String filePath,
                                                 @RequestParam("fileName") String fileName,
                                                 HttpServletRequest request) throws IOException {

        // 파일 이름을 URL 인코딩하여 전달
        String encodedFileName = UriComponentsBuilder.fromUriString(fileName)
                                                     .build()
                                                     .encode()
                                                     .toString();

        
    	String realPath = servletContext.getRealPath("/");
        String absolutePath = realPath + filePath.replace("/", "\\");

        Path path = Paths.get(absolutePath);
        Resource resource = new FileSystemResource(path.toString());

        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.APPLICATION_OCTET_STREAM);
        headers.setContentDispositionFormData("attachment", encodedFileName);
        
        System.out.println("realPath : " + realPath);
        System.out.println("fileName : " + fileName);

        return new ResponseEntity<>(resource, headers, HttpStatus.OK);
    }
}

